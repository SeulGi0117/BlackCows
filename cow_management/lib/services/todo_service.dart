import 'package:dio/dio.dart';
import '../models/todo.dart';
import 'dio_client.dart';

class TodoService {
  final DioClient _dioClient;

  TodoService(this._dioClient);

  // ✅ 서버 요청용 데이터 변환 (create/update에 사용)
  Map<String, dynamic> _prepareTodoData(Todo todo) {
    return {
      'title': todo.title,
      if (todo.description.isNotEmpty) 'description': todo.description,
      'task_type': todo.taskType, // 예: "personal", "cow_specific", "farm_wide"
      'priority': todo.priority, // 예: "low", "medium", ...
      'category': todo.category, // 예: "milking", "feeding", ...
      'due_date': todo.dueDate.toIso8601String().split('T')[0], // "YYYY-MM-DD"
      if (todo.dueTime != null)
        'due_time':
            '${todo.dueTime!.hour.toString().padLeft(2, '0')}:${todo.dueTime!.minute.toString().padLeft(2, '0')}', // "HH:MM"
      'auto_generated': todo.autoGenerated,
      'recurrence': todo.recurrence ?? 'none', // 기본값 fallback
      if (todo.notes != null && todo.notes!.isNotEmpty) 'notes': todo.notes,
      'related_cow_id': todo.relatedCows.isNotEmpty
          ? todo.relatedCows.first
          : null, // 다수 → 단일 ID 매핑
      'farm_id': todo.farmId,
      'owner_id': todo.ownerId,
    };
  }

  // ✅ 공통 응답 파서
  Todo _parseTodoResponse(dynamic data, {String context = 'Todo'}) {
    if (data is! Map<String, dynamic>) {
      throw Exception('Invalid response format in $context API');
    }
    return Todo.fromJson(data);
  }

  // ✅ 생성
  Future<Todo> createTodo(Todo todo) async {
    try {
      final response = await _dioClient.post('/api/todos/create',
          data: _prepareTodoData(todo));
      print('createTodo response: ${response.data}');
      return _parseTodoResponse(response.data, context: 'createTodo');
    } catch (e) {
      rethrow;
    }
  }

  // ✅ 전체 목록 조회
  Future<List<Todo>> getTodos({
    String? status,
    String? priority,
    String? category,
  }) async {
    try {
      final queryParams = <String, dynamic>{};
      if (status?.isNotEmpty ?? false)
        queryParams['status_filter'] = status!.toLowerCase();
      if (priority?.isNotEmpty ?? false)
        queryParams['priority_filter'] = priority!.toLowerCase();
      if (category?.isNotEmpty ?? false)
        queryParams['category_filter'] = category!.toLowerCase();

      final response =
          await _dioClient.get('/api/todos', queryParameters: queryParams);
      print('getTodos response: ${response.data}');
      if (response.data is! List) return [];
      return (response.data as List)
          .map((json) => Todo.fromJson(json as Map<String, dynamic>))
          .toList();
    } catch (e) {
      if (e is DioException) {
        print('❌ DioError in getTodos(): ${e.type}');
        print('📥 Response data: ${e.response?.data}');
        print('📤 Status Code: ${e.response?.statusCode}');
      } else {
        print('❌ Unknown error in getTodos(): $e');
      }
      rethrow;
    }
  }

  // ✅ 상세 조회
  Future<Todo> getTodoById(String taskId) async {
    try {
      final response = await _dioClient.get('/api/todos/$taskId');
      return _parseTodoResponse(response.data, context: 'getTodoById');
    } catch (e) {
      rethrow;
    }
  }

  // ✅ 수정
  Future<Todo> updateTodo(String taskId, Todo updatedTodo) async {
    try {
      final response = await _dioClient.put(
        '/api/todos/$taskId/update',
        data: _prepareTodoData(updatedTodo),
      );
      return _parseTodoResponse(response.data, context: 'updateTodo');
    } catch (e) {
      rethrow;
    }
  }

  // ✅ 삭제
  Future<void> deleteTodo(String taskId) async {
    try {
      await _dioClient.delete('/api/todos/$taskId');
    } catch (e) {
      rethrow;
    }
  }

  // ✅ 완료 처리
  Future<Todo> completeTodo(String taskId, {String? completionNotes}) async {
    try {
      final data = <String, dynamic>{};
      if (completionNotes != null) data['completion_notes'] = completionNotes;

      final response =
          await _dioClient.patch('/api/todos/$taskId/complete', data: data);
      return _parseTodoResponse(response.data, context: 'completeTodo');
    } catch (e) {
      rethrow;
    }
  }

  // ✅ 상태 변경
  Future<Todo> updateTodoStatus(
    String taskId,
    String status, {
    String? completionNotes,
  }) async {
    try {
      final data = {
        'status': status.toLowerCase(),
        if (completionNotes != null) 'completion_notes': completionNotes,
      };
      final response =
          await _dioClient.patch('/api/todos/$taskId/status', data: data);
      return _parseTodoResponse(response.data, context: 'updateTodoStatus');
    } catch (e) {
      rethrow;
    }
  }

  // ✅ 통계 조회
  Future<Map<String, dynamic>> getTodoStatistics() async {
    try {
      final response = await _dioClient.get('/api/todos/statistics');
      if (response.data is! Map<String, dynamic>) {
        throw Exception('Invalid response format in getTodoStatistics');
      }
      return response.data;
    } catch (e) {
      rethrow;
    }
  }

  // ✅ 캘린더용 할 일 목록
  Future<Map<DateTime, List<Todo>>> getCalendarTodos(
    DateTime startDate,
    DateTime endDate,
  ) async {
    try {
      final response = await _dioClient.get(
        '/api/todos/calendar',
        queryParameters: {
          'start_date': startDate.toIso8601String().split('T')[0],
          'end_date': endDate.toIso8601String().split('T')[0],
        },
      );

      final data = response.data;
      if (data is! Map<String, dynamic> ||
          data['dates'] is! Map<String, dynamic>) {
        throw Exception('Invalid calendar data format');
      }

      final result = <DateTime, List<Todo>>{};
      (data['dates'] as Map<String, dynamic>).forEach((key, value) {
        final date = DateTime.tryParse(key);
        if (date != null) {
          result[date] = (value as List)
              .map((json) => Todo.fromJson(json as Map<String, dynamic>))
              .toList();
        }
      });
      return result;
    } catch (e) {
      rethrow;
    }
  }
}

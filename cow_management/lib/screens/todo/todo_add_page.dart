import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../models/todo.dart';
import '../../providers/todo_provider.dart';
import '../../widgets/loading_widget.dart';
import '../../utils/error_utils.dart';
import '../../providers/cow_provider.dart';
import '../../models/cow.dart';
import '../../providers/user_provider.dart';

class TodoAddPage extends StatefulWidget {
  const TodoAddPage({super.key});

  @override
  State<TodoAddPage> createState() => _TodoAddPageState();
}

class _TodoAddPageState extends State<TodoAddPage> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _notesController = TextEditingController();

  DateTime? _selectedDate;
  TimeOfDay? _selectedTime;
  String _selectedPriority = TodoPriority.medium;
  String _selectedCategory = TodoCategory.milking;
  final String _selectedRecurrence = 'none'; //  반복 주기
  final String _selectedTaskType = 'personal'; //  할일 유형
  final bool _isActive = true; //  활성 여부
  Cow? _selectedCow;
  List<Cow> _cowList = [];
  final bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    Future.microtask(() async {
      final cowProvider = context.read<CowProvider>();
      await cowProvider
          .fetchCowsFromBackend(context.read<UserProvider>().accessToken ?? '');
      setState(() {
        _cowList = cowProvider.cows;
      });
    });
  }

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    _notesController.dispose();
    super.dispose();
  }

  void showErrorToast(BuildContext context, String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(message)),
    );
  }

  Future<void> _selectDate(BuildContext context) async {
    final picked = await showDatePicker(
      context: context,
      initialDate: _selectedDate ?? DateTime.now(),
      firstDate: DateTime.now(),
      lastDate: DateTime.now().add(const Duration(days: 365)),
    );
    if (picked != null) setState(() => _selectedDate = picked);
  }

  Future<void> _selectTime(BuildContext context) async {
    final picked = await showTimePicker(
      context: context,
      initialTime: _selectedTime ?? TimeOfDay.now(),
    );
    if (picked != null) setState(() => _selectedTime = picked);
  }

  Future<void> _saveTodo() async {
    if (!_formKey.currentState!.validate()) return;
    if (_selectedDate == null) {
      showErrorToast(context, '마감일을 선택해주세요');
      return;
    }
    if (_selectedPriority.isEmpty || _selectedCategory.isEmpty) {
      showErrorToast(context, '우선순위와 카테고리를 선택해주세요');
      return;
    }

    try {
      final todoProvider = context.read<TodoProvider>();
      final userProvider = context.read<UserProvider>();
      final userId = userProvider.currentUser?.userId ?? '';
      final TextEditingController notesController = TextEditingController();

      final todo = Todo(
          id: '',
          title: _titleController.text,
          description: _descriptionController.text,
          dueDate: _selectedDate!,
          dueTime: _selectedTime,
          priority: _selectedPriority,
          category: _selectedCategory,
          status: TodoStatus.pending,
          taskType: 'personal',
          autoGenerated: false,
          recurrence: 'none',
          notes: notesController.text,
          relatedCowId: _selectedCow?.id,
          isActive: true,
          assignedTo: [],
          relatedCows: _selectedCow != null ? [_selectedCow!.id] : [],
          createdAt: DateTime.now(),
          createdBy: userProvider.currentUser?.userId ?? '',
          farmId: userProvider.currentUser?.farmId ?? '',
          ownerId: userProvider.currentUser?.userId ?? '',
          attachments: [],
          updatedAt: DateTime.now());

      final success = await todoProvider.createTodo(todo);
      if (success != null && mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('할일이 추가되었습니다.')),
        );
        Navigator.pop(context, true);
      }
    } catch (_) {
      if (mounted) {
        showErrorToast(context, '네트워크 오류가 발생했습니다.');
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) return const LoadingWidget();

    return Scaffold(
      appBar: AppBar(
        title: const Text('할일 추가'),
        actions: [
          IconButton(
            icon: const Icon(Icons.save),
            onPressed: _saveTodo,
          ),
        ],
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16.0),
          children: [
            // 제목 입력
            _buildTextField(_titleController, '제목', true),
            const SizedBox(height: 16),

            // 설명 입력
            _buildTextField(_descriptionController, '설명', false, maxLines: 3),
            const SizedBox(height: 16),

            // 마감일, 시간 선택
            _buildDateTile(context),
            _buildTimeTile(context),
            const SizedBox(height: 16),

            // 우선순위 선택
            _buildDropdownField(
              '우선순위',
              _selectedPriority,
              [
                const DropdownMenuItem(
                  value: TodoPriority.high,
                  child: Text('높음'),
                ),
                const DropdownMenuItem(
                  value: TodoPriority.medium,
                  child: Text('중간'),
                ),
                const DropdownMenuItem(
                  value: TodoPriority.low,
                  child: Text('낮음'),
                ),
              ],
              (value) => setState(() => _selectedPriority = value!),
            ),
            const SizedBox(height: 16),

            // 카테고리 선택
            _buildDropdownField(
              '카테고리',
              _selectedCategory,
              [
                const DropdownMenuItem(
                  value: TodoCategory.milking,
                  child: Text('착유'),
                ),
                const DropdownMenuItem(
                  value: TodoCategory.healthCheck,
                  child: Text('건강검진'),
                ),
                const DropdownMenuItem(
                  value: TodoCategory.vaccination,
                  child: Text('백신접종'),
                ),
                const DropdownMenuItem(
                  value: TodoCategory.treatment,
                  child: Text('치료'),
                ),
                const DropdownMenuItem(
                  value: TodoCategory.breeding,
                  child: Text('번식'),
                ),
                const DropdownMenuItem(
                  value: TodoCategory.feeding,
                  child: Text('사료급여'),
                ),
                const DropdownMenuItem(
                  value: TodoCategory.facility,
                  child: Text('시설관리'),
                ),
              ],
              (value) => setState(() => _selectedCategory = value!),
            ),
            const SizedBox(height: 16),

            // 소 선택
            DropdownButtonFormField<Cow>(
              value: _selectedCow,
              decoration: const InputDecoration(
                labelText: '소 선택',
                border: OutlineInputBorder(),
              ),
              items: _cowList
                  .map(
                    (cow) => DropdownMenuItem(
                      value: cow,
                      child: Text('${cow.name} (${cow.earTagNumber})'),
                    ),
                  )
                  .toList(),
              onChanged: (value) => setState(() => _selectedCow = value),
            ),
            const SizedBox(height: 16),

            // 노트 입력
            _buildTextField(_notesController, '비고 (노트)', false, maxLines: 2),
            const SizedBox(height: 16),
          ],
        ),
      ),
    );
  }

  Widget _buildTextField(
      TextEditingController controller, String label, bool isRequired,
      {int maxLines = 1}) {
    return TextFormField(
      controller: controller,
      maxLines: maxLines,
      decoration:
          InputDecoration(labelText: label, border: const OutlineInputBorder()),
      validator: isRequired
          ? (value) => value == null || value.isEmpty ? '$label을 입력해주세요' : null
          : null,
    );
  }

  Widget _buildDropdownField<T>(String label, T currentValue,
      List<DropdownMenuItem<T>> items, void Function(T?) onChanged) {
    return DropdownButtonFormField<T>(
      value: currentValue,
      decoration:
          InputDecoration(labelText: label, border: const OutlineInputBorder()),
      items: items,
      onChanged: onChanged,
    );
  }

  Widget _buildDateTile(BuildContext context) {
    return ListTile(
      title: const Text('마감일'),
      subtitle: Text(_selectedDate == null
          ? '선택해주세요'
          : '${_selectedDate!.year}-${_selectedDate!.month}-${_selectedDate!.day}'),
      trailing: const Icon(Icons.calendar_today),
      onTap: () => _selectDate(context),
    );
  }

  Widget _buildTimeTile(BuildContext context) {
    return ListTile(
      title: const Text('마감 시간'),
      subtitle: Text(_selectedTime == null
          ? '선택해주세요'
          : '${_selectedTime!.hour}:${_selectedTime!.minute}'),
      trailing: const Icon(Icons.access_time),
      onTap: () => _selectTime(context),
    );
  }
}

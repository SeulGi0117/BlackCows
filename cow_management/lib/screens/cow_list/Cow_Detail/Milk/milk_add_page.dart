import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:dio/dio.dart';
import 'package:provider/provider.dart';
import 'package:cow_management/utils/api_config.dart';
import 'package:cow_management/providers/user_provider.dart';

class MilkingRecordPage extends StatefulWidget {
  final String cowId;
  final String cowName;

  const MilkingRecordPage({
    super.key,
    required this.cowId,
    required this.cowName,
  });

  @override
  State<MilkingRecordPage> createState() => _MilkingRecordPageState();
}

class _MilkingRecordPageState extends State<MilkingRecordPage> {
  final _formKey = GlobalKey<FormState>();
  bool _isLoading = false;

  // ÎÇ†Ïßú Î∞è ÏãúÍ∞Ñ
  DateTime _selectedDate = DateTime.now();
  TimeOfDay? _startTime;
  TimeOfDay? _endTime;

  // ÌïÑÏàò ÌïÑÎìú Ïª®Ìä∏Î°§Îü¨
  final _milkYieldController = TextEditingController();
  final _milkingSessionController = TextEditingController();

  // ÌíàÏßà Ï†ïÎ≥¥ Ïª®Ìä∏Î°§Îü¨
  final _fatPercentageController = TextEditingController();
  final _proteinPercentageController = TextEditingController();
  final _somaticCellCountController = TextEditingController();
  final _conductivityController = TextEditingController();
  final _temperatureController = TextEditingController();
  final _colorValueController = TextEditingController();

  // Í∏∞ÌÉÄ Ï†ïÎ≥¥ Ïª®Ìä∏Î°§Îü¨
  final _lactationNumberController = TextEditingController();
  final _ruminationTimeController = TextEditingController();
  final _airFlowValueController = TextEditingController();
  final _collectionCodeController = TextEditingController();
  final _collectionCountController = TextEditingController();
  final _notesController = TextEditingController();

  // ÏÉÅÌÉú Î≥ÄÏàò
  bool _bloodFlowDetected = false;

  @override
  void dispose() {
    _milkYieldController.dispose();
    _milkingSessionController.dispose();
    _fatPercentageController.dispose();
    _proteinPercentageController.dispose();
    _somaticCellCountController.dispose();
    _conductivityController.dispose();
    _temperatureController.dispose();
    _colorValueController.dispose();
    _lactationNumberController.dispose();
    _ruminationTimeController.dispose();
    _airFlowValueController.dispose();
    _collectionCodeController.dispose();
    _collectionCountController.dispose();
    _notesController.dispose();
    super.dispose();
  }

  Future<void> _selectDate() async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _selectedDate,
      firstDate: DateTime(2020),
      lastDate: DateTime.now(),
    );
    if (picked != null && picked != _selectedDate) {
      setState(() {
        _selectedDate = picked;
      });
    }
  }

  Future<void> _selectStartTime() async {
    final TimeOfDay? picked = await showTimePicker(
      context: context,
      initialTime: _startTime ?? TimeOfDay.now(),
    );
    if (picked != null) {
      setState(() {
        _startTime = picked;
      });
    }
  }

  Future<void> _selectEndTime() async {
    final TimeOfDay? picked = await showTimePicker(
      context: context,
      initialTime: _endTime ?? TimeOfDay.now(),
    );
    if (picked != null) {
      setState(() {
        _endTime = picked;
      });
    }
  }

  String _formatTimeOfDay(TimeOfDay time) {
    return '${time.hour.toString().padLeft(2, '0')}:${time.minute.toString().padLeft(2, '0')}:00';
  }

  Future<void> _submitRecord() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() {
      _isLoading = true;
    });

    final token = Provider.of<UserProvider>(context, listen: false).accessToken;
    final dio = Dio();
    final String apiUrl = ApiConfig.baseUrl;

    if (token == null) {
      setState(() {
        _isLoading = false;
      });
      return;
    }

    final body = {
      "cow_id": widget.cowId,
      "record_date": DateFormat("yyyy-MM-dd").format(_selectedDate),
      "milk_yield": double.tryParse(_milkYieldController.text) ?? 0,
      "milking_start_time":
          _startTime != null ? _formatTimeOfDay(_startTime!) : null,
      "milking_end_time": _endTime != null ? _formatTimeOfDay(_endTime!) : null,
      "milking_session": int.tryParse(_milkingSessionController.text) ?? 1,
      "conductivity": _conductivityController.text.isNotEmpty
          ? double.tryParse(_conductivityController.text)
          : null,
      "somatic_cell_count": _somaticCellCountController.text.isNotEmpty
          ? int.tryParse(_somaticCellCountController.text)
          : null,
      "blood_flow_detected": _bloodFlowDetected,
      "color_value": _colorValueController.text.isNotEmpty
          ? _colorValueController.text
          : null,
      "temperature": _temperatureController.text.isNotEmpty
          ? double.tryParse(_temperatureController.text)
          : null,
      "fat_percentage": _fatPercentageController.text.isNotEmpty
          ? double.tryParse(_fatPercentageController.text)
          : null,
      "protein_percentage": _proteinPercentageController.text.isNotEmpty
          ? double.tryParse(_proteinPercentageController.text)
          : null,
      "air_flow_value": _airFlowValueController.text.isNotEmpty
          ? double.tryParse(_airFlowValueController.text)
          : null,
      "lactation_number": _lactationNumberController.text.isNotEmpty
          ? int.tryParse(_lactationNumberController.text)
          : null,
      "rumination_time": _ruminationTimeController.text.isNotEmpty
          ? int.tryParse(_ruminationTimeController.text)
          : null,
      "collection_code": _collectionCodeController.text.isNotEmpty
          ? _collectionCodeController.text
          : null,
      "collection_count": _collectionCountController.text.isNotEmpty
          ? int.tryParse(_collectionCountController.text)
          : null,
      "notes": _notesController.text.isNotEmpty ? _notesController.text : null,
    };

    try {
      final response = await dio.post(
        "$apiUrl/records/milking",
        data: body,
        options: Options(headers: {'Authorization': 'Bearer $token'}),
      );

      setState(() {
        _isLoading = false;
      });

      if (response.statusCode == 201 || response.statusCode == 200) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Row(
                children: [
                  Icon(Icons.check_circle, color: Colors.white),
                  SizedBox(width: 8),
                  Text('Ï∞©Ïú† Í∏∞Î°ùÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Îì±Î°ùÎêòÏóàÏäµÎãàÎã§!'),
                ],
              ),
              backgroundColor: Colors.green,
            ),
          );
          Navigator.pushReplacementNamed(
            context,
            '/milking-records',
            arguments: {
              'cowId': widget.cowId,
              'cowName': widget.cowName,
            },
          );
        }
      } else {
        throw Exception("Îì±Î°ù Ïã§Ìå®");
      }
    } catch (e) {
      setState(() {
        _isLoading = false;
      });
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Row(
              children: [
                const Icon(Icons.error, color: Colors.white),
                const SizedBox(width: 8),
                Expanded(child: Text("Ï∞©Ïú† Í∏∞Î°ù Îì±Î°ù Ïã§Ìå®: $e")),
              ],
            ),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('${widget.cowName} - Ï∞©Ïú† Í∏∞Î°ù Ï∂îÍ∞Ä'),
        backgroundColor: const Color(0xFF4CAF50),
        foregroundColor: Colors.white,
        elevation: 0,
      ),
      resizeToAvoidBottomInset: true,
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16),
          children: [
            // ü•õ Í∏∞Î≥∏ Ï∞©Ïú† Ï†ïÎ≥¥ ÏÑπÏÖò
            Card(
              elevation: 2,
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12)),
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Row(
                      children: [
                        Icon(Icons.local_drink, color: Colors.blue, size: 24),
                        SizedBox(width: 8),
                        Text(
                          'Í∏∞Î≥∏ Ï∞©Ïú† Ï†ïÎ≥¥',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.blue,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 16),

                    // Ï∞©Ïú† ÎÇ†Ïßú
                    InkWell(
                      onTap: _selectDate,
                      child: InputDecorator(
                        decoration: const InputDecoration(
                          labelText: 'Ï∞©Ïú† ÎÇ†Ïßú *',
                          border: OutlineInputBorder(),
                          suffixIcon: Icon(Icons.calendar_today),
                        ),
                        child: Text(
                          DateFormat('yyyy-MM-dd').format(_selectedDate),
                          style: const TextStyle(fontSize: 16),
                        ),
                      ),
                    ),
                    const SizedBox(height: 16),

                    // Ï∞©Ïú† ÏãúÏûë ÏãúÍ∞Ñ
                    InkWell(
                      onTap: _selectStartTime,
                      child: InputDecorator(
                        decoration: const InputDecoration(
                          labelText: 'Ï∞©Ïú† ÏãúÏûë ÏãúÍ∞Ñ',
                          border: OutlineInputBorder(),
                          suffixIcon: Icon(Icons.access_time),
                        ),
                        child: Text(
                          _startTime != null
                              ? _formatTimeOfDay(_startTime!)
                              : 'ÏãúÍ∞ÑÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî',
                          style: TextStyle(
                            fontSize: 16,
                            color:
                                _startTime != null ? Colors.black : Colors.grey,
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(height: 16),

                    // Ï∞©Ïú† Ï¢ÖÎ£å ÏãúÍ∞Ñ
                    InkWell(
                      onTap: _selectEndTime,
                      child: InputDecorator(
                        decoration: const InputDecoration(
                          labelText: 'Ï∞©Ïú† Ï¢ÖÎ£å ÏãúÍ∞Ñ',
                          border: OutlineInputBorder(),
                          suffixIcon: Icon(Icons.access_time),
                        ),
                        child: Text(
                          _endTime != null
                              ? _formatTimeOfDay(_endTime!)
                              : 'ÏãúÍ∞ÑÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî',
                          style: TextStyle(
                            fontSize: 16,
                            color:
                                _endTime != null ? Colors.black : Colors.grey,
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(height: 16),

                    // Ïö∞Ïú† ÏÉùÏÇ∞Îüâ (ÌïÑÏàò)
                    TextFormField(
                      controller: _milkYieldController,
                      keyboardType: TextInputType.number,
                      decoration: const InputDecoration(
                        labelText: 'Ïö∞Ïú† ÏÉùÏÇ∞Îüâ (L) *',
                        border: OutlineInputBorder(),
                        hintText: 'Ïòà: 25.5',
                      ),
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Ïö∞Ïú† ÏÉùÏÇ∞ÎüâÏùÄ ÌïÑÏàò ÏûÖÎ†• Ìï≠Î™©ÏûÖÎãàÎã§.';
                        }
                        final amount = double.tryParse(value);
                        if (amount == null || amount <= 0) {
                          return 'Ïò¨Î∞îÎ•∏ Ïö∞Ïú† ÏÉùÏÇ∞ÎüâÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî.';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 16),

                    // Ï∞©Ïú† ÌöåÏ∞®
                    TextFormField(
                      controller: _milkingSessionController,
                      keyboardType: TextInputType.number,
                      decoration: const InputDecoration(
                        labelText: 'Ï∞©Ïú† ÌöåÏ∞® *',
                        border: OutlineInputBorder(),
                        hintText: 'Ïòà: 1 (1ÌöåÏ∞®), 2 (2ÌöåÏ∞®)',
                      ),
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Ï∞©Ïú† ÌöåÏ∞®Îäî ÌïÑÏàò ÏûÖÎ†• Ìï≠Î™©ÏûÖÎãàÎã§.';
                        }
                        final session = int.tryParse(value);
                        if (session == null || session <= 0) {
                          return 'Ïò¨Î∞îÎ•∏ Ï∞©Ïú† ÌöåÏ∞®Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî.';
                        }
                        return null;
                      },
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),

            // üß™ Ïö∞Ïú† ÌíàÏßà Ï†ïÎ≥¥ ÏÑπÏÖò
            Card(
              elevation: 2,
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12)),
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Row(
                      children: [
                        Icon(Icons.science, color: Colors.green, size: 24),
                        SizedBox(width: 8),
                        Text(
                          'Ïö∞Ïú† ÌíàÏßà Ï†ïÎ≥¥',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.green,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 16),

                    // Ïú†ÏßÄÎ∞© Ìï®Îüâ
                    TextFormField(
                      controller: _fatPercentageController,
                      keyboardType: TextInputType.number,
                      decoration: const InputDecoration(
                        labelText: 'Ïú†ÏßÄÎ∞© Ìï®Îüâ (%)',
                        border: OutlineInputBorder(),
                        hintText: 'Ïòà: 3.8',
                      ),
                    ),
                    const SizedBox(height: 16),

                    // Îã®Î∞±Ïßà Ìï®Îüâ
                    TextFormField(
                      controller: _proteinPercentageController,
                      keyboardType: TextInputType.number,
                      decoration: const InputDecoration(
                        labelText: 'Îã®Î∞±Ïßà Ìï®Îüâ (%)',
                        border: OutlineInputBorder(),
                        hintText: 'Ïòà: 3.2',
                      ),
                    ),
                    const SizedBox(height: 16),

                    // Ï≤¥ÏÑ∏Ìè¨ Ïàò
                    TextFormField(
                      controller: _somaticCellCountController,
                      keyboardType: TextInputType.number,
                      decoration: const InputDecoration(
                        labelText: 'Ï≤¥ÏÑ∏Ìè¨ Ïàò',
                        border: OutlineInputBorder(),
                        hintText: 'Ïòà: 150000',
                      ),
                    ),
                    const SizedBox(height: 16),

                    // Ï†ÑÎèÑÎèÑ
                    TextFormField(
                      controller: _conductivityController,
                      keyboardType: TextInputType.number,
                      decoration: const InputDecoration(
                        labelText: 'Ï†ÑÎèÑÎèÑ',
                        border: OutlineInputBorder(),
                        hintText: 'Ïòà: 5.2',
                      ),
                    ),
                    const SizedBox(height: 16),

                    // Ïò®ÎèÑ
                    TextFormField(
                      controller: _temperatureController,
                      keyboardType: TextInputType.number,
                      decoration: const InputDecoration(
                        labelText: 'Ïò®ÎèÑ (‚ÑÉ)',
                        border: OutlineInputBorder(),
                        hintText: 'Ïòà: 37.5',
                      ),
                    ),
                    const SizedBox(height: 16),

                    // Ïö∞Ïú† ÏÉâÏÉÅ
                    TextFormField(
                      controller: _colorValueController,
                      decoration: const InputDecoration(
                        labelText: 'Ïö∞Ïú† ÏÉâÏÉÅ',
                        border: OutlineInputBorder(),
                        hintText: 'Ïòà: Ï†ïÏÉÅ, Ïù¥ÏÉÅ',
                      ),
                    ),
                    const SizedBox(height: 16),

                    // ÌòàÎ•ò Í∞êÏßÄ Ïó¨Î∂Ä
                    SwitchListTile(
                      title: const Text('ÌòàÎ•ò Í∞êÏßÄ Ïó¨Î∂Ä'),
                      subtitle: const Text('Ïö∞Ïú†ÏóêÏÑú ÌòàÎ•òÍ∞Ä Í∞êÏßÄÎêòÏóàÏäµÎãàÍπå?'),
                      value: _bloodFlowDetected,
                      onChanged: (val) =>
                          setState(() => _bloodFlowDetected = val),
                      activeColor: Colors.blue,
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),

            // Ï∂îÍ∞Ä Ï∏°Ï†ï Ï†ïÎ≥¥ ÏÑπÏÖò
            Card(
              elevation: 2,
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12)),
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Row(
                      children: [
                        Icon(Icons.analytics, color: Colors.orange, size: 24),
                        SizedBox(width: 8),
                        Text(
                          'Ï∂îÍ∞Ä Ï∏°Ï†ï Ï†ïÎ≥¥',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.orange,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 16),

                    // ÏÇ∞Ï∞®
                    TextFormField(
                      controller: _lactationNumberController,
                      keyboardType: TextInputType.number,
                      decoration: const InputDecoration(
                        labelText: 'ÏÇ∞Ï∞®',
                        border: OutlineInputBorder(),
                        hintText: 'Ïòà: 3',
                      ),
                    ),
                    const SizedBox(height: 16),

                    // Î∞òÏ∂î ÏãúÍ∞Ñ
                    TextFormField(
                      controller: _ruminationTimeController,
                      keyboardType: TextInputType.number,
                      decoration: const InputDecoration(
                        labelText: 'Î∞òÏ∂î ÏãúÍ∞Ñ (Î∂Ñ)',
                        border: OutlineInputBorder(),
                        hintText: 'Ïòà: 480',
                      ),
                    ),
                    const SizedBox(height: 16),

                    // Í≥µÍ∏∞ ÌùêÎ¶Ñ Í∞í
                    TextFormField(
                      controller: _airFlowValueController,
                      keyboardType: TextInputType.number,
                      decoration: const InputDecoration(
                        labelText: 'Í≥µÍ∏∞ ÌùêÎ¶Ñ Í∞í',
                        border: OutlineInputBorder(),
                        hintText: 'Ïòà: 2.1',
                      ),
                    ),
                    const SizedBox(height: 16),

                    // ÏàòÏßë ÏΩîÎìú
                    TextFormField(
                      controller: _collectionCodeController,
                      decoration: const InputDecoration(
                        labelText: 'ÏàòÏßë ÏΩîÎìú',
                        border: OutlineInputBorder(),
                        hintText: 'Ïòà: AUTO',
                      ),
                    ),
                    const SizedBox(height: 16),

                    // ÏàòÏßë ÌöüÏàò
                    TextFormField(
                      controller: _collectionCountController,
                      keyboardType: TextInputType.number,
                      decoration: const InputDecoration(
                        labelText: 'ÏàòÏßë ÌöüÏàò',
                        border: OutlineInputBorder(),
                        hintText: 'Ïòà: 1',
                      ),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),

            // üìù Ï∂îÍ∞Ä Ï†ïÎ≥¥ ÏÑπÏÖò
            Card(
              elevation: 2,
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12)),
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Row(
                      children: [
                        Icon(Icons.note_alt, color: Colors.purple, size: 24),
                        SizedBox(width: 8),
                        Text(
                          'Ï∂îÍ∞Ä Ï†ïÎ≥¥',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.purple,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 16),

                    // ÎπÑÍ≥† Î∞è Î©îÎ™®
                    TextFormField(
                      controller: _notesController,
                      maxLines: 3,
                      decoration: const InputDecoration(
                        labelText: 'ÎπÑÍ≥† Î∞è Î©îÎ™®',
                        border: OutlineInputBorder(),
                        hintText: 'Ï∞©Ïú† Í≥ºÏ†ïÏóêÏÑú ÌäπÏù¥ÏÇ¨Ìï≠Ïù¥ÎÇò Î©îÎ™®Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî',
                      ),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 24),

            // Îì±Î°ù Î≤ÑÌäº
            SizedBox(
              width: double.infinity,
              height: 50,
              child: ElevatedButton(
                onPressed: _isLoading ? null : _submitRecord,
                style: ElevatedButton.styleFrom(
                  backgroundColor: const Color(0xFF4CAF50),
                  foregroundColor: Colors.white,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                  elevation: 2,
                ),
                child: _isLoading
                    ? const Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          SizedBox(
                            width: 20,
                            height: 20,
                            child: CircularProgressIndicator(
                              strokeWidth: 2,
                              valueColor:
                                  AlwaysStoppedAnimation<Color>(Colors.white),
                            ),
                          ),
                          SizedBox(width: 12),
                          Text('Îì±Î°ù Ï§ë...'),
                        ],
                      )
                    : const Text(
                        'Ï∞©Ïú† Í∏∞Î°ù Ï†ÄÏû•',
                        style: TextStyle(
                            fontSize: 16, fontWeight: FontWeight.bold),
                      ),
              ),
            ),
            const SizedBox(height: 16),
          ],
        ),
      ),
    );
  }
}

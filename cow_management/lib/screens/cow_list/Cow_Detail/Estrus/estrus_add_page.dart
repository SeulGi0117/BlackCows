import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:intl/intl.dart';
import 'package:cow_management/models/Detail/Reproduction/estrus_record.dart';
import 'package:cow_management/providers/DetailPage/Reproduction/estrus_record_provider.dart';
import 'package:cow_management/providers/user_provider.dart';

class EstrusAddPage extends StatefulWidget {
  final String cowId;
  final String cowName;

  const EstrusAddPage({
    super.key,
    required this.cowId,
    required this.cowName,
  });

  @override
  State<EstrusAddPage> createState() => _EstrusAddPageState();
}

class _EstrusAddPageState extends State<EstrusAddPage> {
  final _formKey = GlobalKey<FormState>();
  bool _isLoading = false;

  // Ïª®Ìä∏Î°§Îü¨Îì§
  final _startTimeController = TextEditingController();
  final _durationController = TextEditingController();
  final _behaviorSignsController = TextEditingController();
  final _visualSignsController = TextEditingController();
  final _detectedByController = TextEditingController();
  final _notesController = TextEditingController();

  // ÏÉÅÌÉú Î≥ÄÏàòÎì§
  DateTime _selectedDate = DateTime.now();
  TimeOfDay? _selectedTime;
  String? _estrusIntensity;
  String? _detectionMethod;
  DateTime? _nextExpectedEstrus;
  bool _breedingPlanned = false;

  @override
  void dispose() {
    _startTimeController.dispose();
    _durationController.dispose();
    _behaviorSignsController.dispose();
    _visualSignsController.dispose();
    _detectedByController.dispose();
    _notesController.dispose();
    super.dispose();
  }

  Future<void> _selectDate() async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _selectedDate,
      firstDate: DateTime(2020),
      lastDate: DateTime.now(),
    );
    if (picked != null && picked != _selectedDate) {
      setState(() {
        _selectedDate = picked;
      });
    }
  }

  Future<void> _selectTime() async {
    final TimeOfDay? picked = await showTimePicker(
      context: context,
      initialTime: _selectedTime ?? TimeOfDay.now(),
    );
    if (picked != null) {
      setState(() {
        _selectedTime = picked;
        _startTimeController.text =
            '${picked.hour.toString().padLeft(2, '0')}:${picked.minute.toString().padLeft(2, '0')}:00';
      });
    }
  }

  Future<void> _selectNextEstrusDate() async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate:
          _nextExpectedEstrus ?? DateTime.now().add(const Duration(days: 21)),
      firstDate: DateTime.now(),
      lastDate: DateTime.now().add(const Duration(days: 365)),
    );
    if (picked != null) {
      setState(() {
        _nextExpectedEstrus = picked;
      });
    }
  }

  Future<void> _submit() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() {
      _isLoading = true;
    });

    final token = Provider.of<UserProvider>(context, listen: false).accessToken;
    if (token == null) {
      setState(() {
        _isLoading = false;
      });
      return;
    }

    final record = EstrusRecord(
      cowId: widget.cowId,
      recordDate: DateFormat('yyyy-MM-dd').format(_selectedDate),
      estrusStartTime: _startTimeController.text.isNotEmpty
          ? _startTimeController.text
          : null,
      estrusIntensity: _estrusIntensity,
      estrusDuration: int.tryParse(_durationController.text),
      behaviorSigns: _behaviorSignsController.text.isNotEmpty
          ? _behaviorSignsController.text
              .split(',')
              .map((e) => e.trim())
              .toList()
          : null,
      visualSigns: _visualSignsController.text.isNotEmpty
          ? _visualSignsController.text.split(',').map((e) => e.trim()).toList()
          : null,
      detectedBy: _detectedByController.text.isNotEmpty
          ? _detectedByController.text
          : null,
      detectionMethod: _detectionMethod,
      nextExpectedEstrus: _nextExpectedEstrus != null
          ? DateFormat('yyyy-MM-dd').format(_nextExpectedEstrus!)
          : null,
      breedingPlanned: _breedingPlanned,
      notes: _notesController.text.isNotEmpty ? _notesController.text : null,
    );

    final success =
        await Provider.of<EstrusRecordProvider>(context, listen: false)
            .addEstrusRecord(record, token);

    setState(() {
      _isLoading = false;
    });

    if (success) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Row(
            children: [
              Icon(Icons.check_circle, color: Colors.white),
              SizedBox(width: 8),
              Text('Î∞úÏ†ï Í∏∞Î°ùÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Îì±Î°ùÎêòÏóàÏäµÎãàÎã§!'),
            ],
          ),
          backgroundColor: Colors.green,
        ),
      );
      Navigator.pop(context);
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Row(
            children: [
              Icon(Icons.error, color: Colors.white),
              SizedBox(width: 8),
              Text('Î∞úÏ†ï Í∏∞Î°ù Îì±Î°ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.'),
            ],
          ),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.pink.shade50,
      appBar: AppBar(
        title: Text('${widget.cowName} - Î∞úÏ†ï Í∏∞Î°ù Ï∂îÍ∞Ä'),
        backgroundColor: Colors.pink,
        foregroundColor: Colors.white,
        elevation: 0,
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16),
          children: [
            // üíï Í∏∞Î≥∏ Ï†ïÎ≥¥ ÏÑπÏÖò
            Card(
              elevation: 2,
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12)),
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Row(
                      children: [
                        Icon(Icons.favorite, color: Colors.pink, size: 24),
                        SizedBox(width: 8),
                        Text(
                          'Í∏∞Î≥∏ Ï†ïÎ≥¥',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.pink,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 16),

                    // Î∞úÏ†ï ÎÇ†Ïßú
                    InkWell(
                      onTap: _selectDate,
                      child: InputDecorator(
                        decoration: const InputDecoration(
                          labelText: 'Î∞úÏ†ï ÎÇ†Ïßú *',
                          border: OutlineInputBorder(),
                          suffixIcon: Icon(Icons.calendar_today),
                        ),
                        child: Text(
                          DateFormat('yyyy-MM-dd').format(_selectedDate),
                          style: const TextStyle(fontSize: 16),
                        ),
                      ),
                    ),
                    const SizedBox(height: 16),

                    // Î∞úÏ†ï ÏãúÏûë ÏãúÍ∞Ñ
                    TextFormField(
                      controller: _startTimeController,
                      readOnly: true,
                      onTap: _selectTime,
                      decoration: const InputDecoration(
                        labelText: 'Î∞úÏ†ï ÏãúÏûë ÏãúÍ∞Ñ',
                        border: OutlineInputBorder(),
                        suffixIcon: Icon(Icons.access_time),
                        hintText: 'ÏãúÍ∞ÑÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî',
                      ),
                    ),
                    const SizedBox(height: 16),

                    // Î∞úÏ†ï Í∞ïÎèÑ
                    DropdownButtonFormField<String>(
                      value: _estrusIntensity,
                      decoration: const InputDecoration(
                        labelText: 'Î∞úÏ†ï Í∞ïÎèÑ',
                        border: OutlineInputBorder(),
                      ),
                      items: ['ÏïΩ', 'Ï§ë', 'Í∞ï'].map((level) {
                        return DropdownMenuItem(
                          value: level,
                          child: Text(level),
                        );
                      }).toList(),
                      onChanged: (val) =>
                          setState(() => _estrusIntensity = val),
                    ),
                    const SizedBox(height: 16),

                    // Î∞úÏ†ï ÏßÄÏÜçÏãúÍ∞Ñ
                    TextFormField(
                      controller: _durationController,
                      keyboardType: TextInputType.number,
                      decoration: const InputDecoration(
                        labelText: 'Î∞úÏ†ï ÏßÄÏÜçÏãúÍ∞Ñ (ÏãúÍ∞Ñ)',
                        border: OutlineInputBorder(),
                        hintText: 'Ïòà: 12',
                      ),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),

            // üîç Î∞úÏ†ï ÏßïÌõÑ ÏÑπÏÖò
            Card(
              elevation: 2,
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12)),
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Row(
                      children: [
                        Icon(Icons.visibility, color: Colors.orange, size: 24),
                        SizedBox(width: 8),
                        Text(
                          'Î∞úÏ†ï ÏßïÌõÑ',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.orange,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 16),

                    // ÌñâÎèô ÏßïÌõÑ
                    TextFormField(
                      controller: _behaviorSignsController,
                      maxLines: 2,
                      decoration: const InputDecoration(
                        labelText: 'ÌñâÎèô ÏßïÌõÑ',
                        border: OutlineInputBorder(),
                        hintText: 'ÏäπÍ∞ÄÌóàÏö©, Î∂àÏïà, Ïö∏Ïùå Îì± (ÏâºÌëúÎ°ú Íµ¨Î∂Ñ)',
                      ),
                    ),
                    const SizedBox(height: 16),

                    // Ïú°Ïïà Í¥ÄÏ∞∞ ÏÇ¨Ìï≠
                    TextFormField(
                      controller: _visualSignsController,
                      maxLines: 2,
                      decoration: const InputDecoration(
                        labelText: 'Ïú°Ïïà Í¥ÄÏ∞∞ ÏÇ¨Ìï≠',
                        border: OutlineInputBorder(),
                        hintText: 'Ï†êÏï°Î∂ÑÎπÑ, Ïô∏ÏùåÎ∂ÄÏ¢Ö Îì± (ÏâºÌëúÎ°ú Íµ¨Î∂Ñ)',
                      ),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),

            // üë§ Î∞úÍ≤¨ Ï†ïÎ≥¥ ÏÑπÏÖò
            Card(
              elevation: 2,
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12)),
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Row(
                      children: [
                        Icon(Icons.person_search, color: Colors.blue, size: 24),
                        SizedBox(width: 8),
                        Text(
                          'Î∞úÍ≤¨ Ï†ïÎ≥¥',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.blue,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 16),

                    // Î∞úÍ≤¨Ïûê
                    TextFormField(
                      controller: _detectedByController,
                      decoration: const InputDecoration(
                        labelText: 'Î∞úÍ≤¨Ïûê Ïù¥Î¶Ñ',
                        border: OutlineInputBorder(),
                        hintText: 'Î∞úÍ≤¨Ìïú ÏÇ¨ÎûåÏùò Ïù¥Î¶Ñ',
                      ),
                    ),
                    const SizedBox(height: 16),

                    // Î∞úÍ≤¨ Î∞©Î≤ï
                    DropdownButtonFormField<String>(
                      value: _detectionMethod,
                      decoration: const InputDecoration(
                        labelText: 'Î∞úÍ≤¨ Î∞©Î≤ï',
                        border: OutlineInputBorder(),
                      ),
                      items: ['Ïú°ÏïàÍ¥ÄÏ∞∞', 'ÏÑºÏÑúÍ∞êÏßÄ', 'Í∏∞ÌÉÄ'].map((method) {
                        return DropdownMenuItem(
                          value: method,
                          child: Text(method),
                        );
                      }).toList(),
                      onChanged: (val) =>
                          setState(() => _detectionMethod = val),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),

            // üìÖ Í≥ÑÌöç Î∞è ÏòàÏ∏° ÏÑπÏÖò
            Card(
              elevation: 2,
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12)),
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Row(
                      children: [
                        Icon(Icons.schedule, color: Colors.green, size: 24),
                        SizedBox(width: 8),
                        Text(
                          'Í≥ÑÌöç Î∞è ÏòàÏ∏°',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.green,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 16),

                    // Îã§Ïùå Î∞úÏ†ï ÏòàÏÉÅÏùº
                    InkWell(
                      onTap: _selectNextEstrusDate,
                      child: InputDecorator(
                        decoration: const InputDecoration(
                          labelText: 'Îã§Ïùå Î∞úÏ†ï ÏòàÏÉÅÏùº',
                          border: OutlineInputBorder(),
                          suffixIcon: Icon(Icons.calendar_today),
                        ),
                        child: Text(
                          _nextExpectedEstrus != null
                              ? DateFormat('yyyy-MM-dd')
                                  .format(_nextExpectedEstrus!)
                              : 'ÎÇ†ÏßúÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî',
                          style: TextStyle(
                            fontSize: 16,
                            color: _nextExpectedEstrus != null
                                ? Colors.black
                                : Colors.grey,
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(height: 16),

                    // ÍµêÎ∞∞ Í≥ÑÌöç
                    SwitchListTile(
                      title: const Text('ÍµêÎ∞∞ Í≥ÑÌöç ÏûàÏùå'),
                      subtitle: const Text('Ïù¥Î≤à Î∞úÏ†ïÏóê ÍµêÎ∞∞Î•º Í≥ÑÌöçÌïòÍ≥† ÏûàÏäµÎãàÍπå?'),
                      value: _breedingPlanned,
                      onChanged: (val) =>
                          setState(() => _breedingPlanned = val),
                      activeColor: Colors.pink,
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),

            // üìù Ï∂îÍ∞Ä Ï†ïÎ≥¥ ÏÑπÏÖò
            Card(
              elevation: 2,
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12)),
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Row(
                      children: [
                        Icon(Icons.note_alt, color: Colors.purple, size: 24),
                        SizedBox(width: 8),
                        Text(
                          'Ï∂îÍ∞Ä Ï†ïÎ≥¥',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.purple,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 16),

                    // Î©îÎ™®
                    TextFormField(
                      controller: _notesController,
                      maxLines: 3,
                      decoration: const InputDecoration(
                        labelText: 'ÌäπÏù¥ÏÇ¨Ìï≠ Î∞è Î©îÎ™®',
                        border: OutlineInputBorder(),
                        hintText: 'Ï∂îÍ∞ÄÎ°ú Í∏∞Î°ùÌï† ÎÇ¥Ïö©Ïù¥ ÏûàÎã§Î©¥ ÏûÖÎ†•ÌïòÏÑ∏Ïöî',
                      ),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 24),

            // Îì±Î°ù Î≤ÑÌäº
            SizedBox(
              width: double.infinity,
              height: 50,
              child: ElevatedButton(
                onPressed: _isLoading ? null : _submit,
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.pink,
                  foregroundColor: Colors.white,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                  elevation: 2,
                ),
                child: _isLoading
                    ? const Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          SizedBox(
                            width: 20,
                            height: 20,
                            child: CircularProgressIndicator(
                              strokeWidth: 2,
                              valueColor:
                                  AlwaysStoppedAnimation<Color>(Colors.white),
                            ),
                          ),
                          SizedBox(width: 12),
                          Text('Îì±Î°ù Ï§ë...'),
                        ],
                      )
                    : const Text(
                        'Î∞úÏ†ï Í∏∞Î°ù Ï†ÄÏû•',
                        style: TextStyle(
                            fontSize: 16, fontWeight: FontWeight.bold),
                      ),
              ),
            ),
            const SizedBox(height: 16),
          ],
        ),
      ),
    );
  }
}

import 'package:flutter/material.dart';

class Todo {
  final String id;
  final String title;
  final String description;
  final DateTime dueDate;
  final TimeOfDay? dueTime;
  final String priority;
  final String category;
  final String status;
  final String taskType;
  final bool autoGenerated;
  final String recurrence;
  final String? notes;
  final String? relatedCowId;
  final bool isActive;
  final List<String> assignedTo;
  final List<String> relatedCows;
  final DateTime createdAt;
  final DateTime updatedAt;
  final String createdBy;
  final String farmId;
  final String ownerId;
  final DateTime? completionDate;
  final String? completionNotes;
  final List<TodoAttachment> attachments;

  Todo({
    required this.id,
    required this.title,
    required this.description,
    required this.dueDate,
    this.dueTime,
    required this.priority,
    required this.category,
    required this.status,
    required this.taskType,
    required this.autoGenerated,
    required this.recurrence,
    this.notes,
    this.relatedCowId,
    required this.isActive,
    required this.assignedTo,
    required this.relatedCows,
    required this.createdAt,
    required this.updatedAt,
    required this.createdBy,
    required this.farmId,
    required this.ownerId,
    this.completionDate,
    this.completionNotes,
    required this.attachments,
  });

  String? _formatDate(DateTime? date) {
    if (date == null) return null;
    return '${date.year.toString().padLeft(4, '0')}-'
        '${date.month.toString().padLeft(2, '0')}-'
        '${date.day.toString().padLeft(2, '0')}';
  }

  String? _formatTime(TimeOfDay? time) {
    if (time == null) return null;
    return '${time.hour.toString().padLeft(2, '0')}:'
        '${time.minute.toString().padLeft(2, '0')}';
  }

  factory Todo.fromJson(Map<String, dynamic> json) {
    final dueDateStr = json['due_date'] as String?;
    final dueDateTime = (dueDateStr != null && dueDateStr.isNotEmpty)
        ? DateTime.tryParse(dueDateStr)
        : null;

    TimeOfDay? dueTime;
    final dueTimeStr = json['due_time'] as String?;
    if (dueTimeStr != null && dueTimeStr.isNotEmpty) {
      final timeParts = dueTimeStr.split(':');
      if (timeParts.length >= 2) {
        dueTime = TimeOfDay(
          hour: int.tryParse(timeParts[0]) ?? 0,
          minute: int.tryParse(timeParts[1]) ?? 0,
        );
      }
    }

    return Todo(
      id: json['id'] as String? ?? '',
      title: json['title'] as String? ?? '',
      description: json['description'] as String? ?? '',
      dueDate: dueDateTime ?? DateTime.now(),
      dueTime: dueTime,
      priority: json['priority'] as String? ?? 'medium',
      category: json['category'] as String? ?? 'general',
      status: json['status'] as String? ?? 'pending',
      taskType: json['task_type'] as String? ?? 'personal',
      autoGenerated: json['auto_generated'] as bool? ?? false,
      recurrence: json['recurrence'] as String? ?? 'none',
      notes: json['notes'] as String?,
      relatedCowId: json['related_cow_id'] as String?,
      isActive: json['is_active'] as bool? ?? true,
      assignedTo: (json['assigned_to'] as List<dynamic>? ?? [])
          .map((e) => e.toString())
          .toList(),
      relatedCows: (json['related_cows'] as List<dynamic>? ?? [])
          .map((e) => e.toString())
          .toList(),
      createdAt: DateTime.tryParse(json['created_at'] as String? ?? '') ??
          DateTime.now(),
      updatedAt: DateTime.tryParse(json['updated_at'] as String? ?? '') ??
          DateTime.now(),
      createdBy: json['created_by'] as String? ?? '',
      farmId: json['farm_id'] as String? ?? '',
      ownerId: json['owner_id'] as String? ?? '',
      completionDate: (json['completion_date'] is String &&
              (json['completion_date'] as String).isNotEmpty)
          ? DateTime.tryParse(json['completion_date'])
          : null,
      completionNotes: json['completion_notes'] as String?,
      attachments: (json['attachments'] as List<dynamic>? ?? [])
          .map((e) => TodoAttachment.fromJson(e))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'title': title,
      'description': description,
      'due_date': dueDate != null
          ? '${dueDate.year.toString().padLeft(4, '0')}-'
              '${dueDate.month.toString().padLeft(2, '0')}-'
              '${dueDate.day.toString().padLeft(2, '0')}'
          : null,
      'due_time': dueTime != null
          ? '${dueTime!.hour.toString().padLeft(2, '0')}:'
              '${dueTime!.minute.toString().padLeft(2, '0')}'
          : null,
      'priority': priority,
      'category': category,
      'status': status,
      'task_type': taskType,
      'auto_generated': autoGenerated,
      'recurrence': recurrence,
      'notes': notes,
      'related_cow_id': relatedCowId,
      'is_active': isActive,
      'assigned_to': assignedTo,
      'related_cows': relatedCows,
      'created_at': createdAt.toIso8601String(),
      'updated_at': updatedAt.toIso8601String(),
      'created_by': createdBy,
      'farm_id': farmId,
      'owner_id': ownerId,
      if (completionDate != null)
        'completion_date': completionDate!.toIso8601String(),
      if (completionNotes != null) 'completion_notes': completionNotes,
      'attachments': attachments.map((e) => e.toJson()).toList(),
    };
  }

  Todo copyWith({
    String? id,
    String? title,
    String? description,
    DateTime? dueDate,
    TimeOfDay? dueTime,
    String? priority,
    String? category,
    String? status,
    List<String>? assignedTo,
    List<String>? relatedCows,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? createdBy,
    DateTime? completionDate,
    String? completionNotes,
    List<TodoAttachment>? attachments,
    String? taskType,
    String? farmId,
    String? ownerId,
    String? recurrence,
    bool? autoGenerated,
    String? notes,
    String? relatedCowId,
    bool? isActive,
  }) {
    return Todo(
      id: id ?? this.id,
      title: title ?? this.title,
      description: description ?? this.description,
      dueDate: dueDate ?? this.dueDate,
      dueTime: dueTime ?? this.dueTime,
      priority: priority ?? this.priority,
      category: category ?? this.category,
      status: status ?? this.status,
      assignedTo: assignedTo ?? this.assignedTo,
      relatedCows: relatedCows ?? this.relatedCows,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      createdBy: createdBy ?? this.createdBy,
      completionDate: completionDate ?? this.completionDate,
      completionNotes: completionNotes ?? this.completionNotes,
      attachments: attachments ?? this.attachments,
      taskType: taskType ?? this.taskType,
      farmId: farmId ?? this.farmId,
      ownerId: ownerId ?? this.ownerId,
      recurrence: recurrence ?? this.recurrence,
      autoGenerated: autoGenerated ?? this.autoGenerated,
      notes: notes ?? this.notes,
      relatedCowId: relatedCowId ?? this.relatedCowId,
      isActive: isActive ?? this.isActive,
    );
  }
}

class TodoAttachment {
  final String id;
  final String filename;
  final String url;
  final DateTime uploadedAt;

  TodoAttachment({
    required this.id,
    required this.filename,
    required this.url,
    required this.uploadedAt,
  });

  factory TodoAttachment.fromJson(Map<String, dynamic> json) {
    return TodoAttachment(
      id: json['id'],
      filename: json['filename'],
      url: json['url'],
      uploadedAt: DateTime.parse(json['uploaded_at']),
    );
  }

  Map<String, dynamic> toJson() => {
        'id': id,
        'filename': filename,
        'url': url,
        'uploaded_at': uploadedAt.toIso8601String(),
      };
}

class TodoPriority {
  static const String high = 'high';
  static const String medium = 'medium';
  static const String low = 'low';
}

class TodoStatus {
  static const String pending = 'pending';
  static const String inProgress = 'in_progress';
  static const String completed = 'completed';
  static const String cancelled = 'cancelled';
  static const String overdue = 'overdue';
}

class TodoCategory {
  static const String milking = 'milking';
  static const String healthCheck = 'health_check';
  static const String vaccination = 'vaccination';
  static const String treatment = 'treatment';
  static const String breeding = 'breeding';
  static const String feeding = 'feeding';
  static const String facility = 'facility';
}
